(()=>{var t;!function(t){t[t.Idle=0]="Idle",t[t.Countdown=1]="Countdown",t[t.Recording=2]="Recording"}(t||(t={}));class e extends AudioWorkletProcessor{constructor(){super(),this.state=t.Idle,this.delayCountDown=0,this.recordingCountDown=0,this.inputLevel=0,this.inputLevelUpdateInterval=Math.round(sampleRate/30),this.inputLevelSamplesUntilUpdate=this.inputLevelUpdateInterval,this.port.onmessage=t=>{const e=t.data;"setSweep"==e.action?(this.sweep=e.sweep,this.response=new Array):"startRecording"==e.action?this.startRecording(e.settings):"stopRecording"==e.action&&this.stopRecording()}}startRecording(e){this.response=new Array,this.delayCountDown=e.startDelay*sampleRate,this.recordingCountDown=e.length*sampleRate+this.sweep.length,this.currentPlaybackIndex=0,this.state=t.Countdown}stopRecording(){this.state=t.Idle,this.port.postMessage({buffers:[...this.response]},this.response.map((t=>t.buffer))),this.response=new Array}process(e,s,n){const i=e[0][0];if(!i)return!0;const o=i.length;for(let t=0;t<o;++t){const e=Math.abs(i[t]);e>this.inputLevel?this.inputLevel=e:this.inputLevel=.9995*this.inputLevel+5e-4*e}if(this.inputLevelSamplesUntilUpdate-=o,this.inputLevelSamplesUntilUpdate<=0&&(this.port.postMessage({inputLevel:this.inputLevel}),this.inputLevelSamplesUntilUpdate=this.inputLevelUpdateInterval),this.state==t.Countdown)this.delayCountDown-=o,this.delayCountDown<=0&&(this.state=t.Recording);else if(this.state==t.Recording){if(e[0][0]&&this.response.push(new Float32Array(e[0][0])),this.currentPlaybackIndex<this.sweep.length){const t=s[0][0],e=Math.min(this.sweep.length-this.currentPlaybackIndex,t.length);for(var r=0;r<e;++r)t[r]=this.sweep[this.currentPlaybackIndex],this.currentPlaybackIndex+=1}this.recordingCountDown-=o,this.recordingCountDown<=0&&this.stopRecording()}return!0}}registerProcessor("SweepProcessor",e)})();